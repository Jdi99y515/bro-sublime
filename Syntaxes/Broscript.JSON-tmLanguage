// [PackageDev] target_format: plist
{
	"name": "Broscript",
	"scopeName": "source.bro",
	"fileTypes": ["bro"],
	"repository": {
		"string_escaped_char": {
			"patterns": [
				{
					"name": "constant.character.escape.bro", 
					"match": "\\\\(\\\\|[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2})"
				}, 
				{
					"name": "invalid.illegal.unknown-escape.bro", 
					"match": "\\\\."
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"name": "constant.other.placeholder.bro", 
					"match": "(?x)%\n\t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n\t\t\t\t\t\t[#0\\- +']*                           # flags\n\t\t\t\t\t\t[,;:_]?                              # separator character (AltiVec)\n\t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n\t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n\t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n\t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n\t\t\t\t\t"
				}, 
				{
					"name": "invalid.illegal.placeholder.bro", 
					"match": "%"
				}
			]
		},
		"attributes": {
			"patterns": [
				{
					"name": "meta.property.bro",
					"match": "(&)(redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column)",
					"captures": {
						"2": {
							"name": "storage.modifier.bro"
						} 
					}
				}
			]
		},
		"directives": {
			"patterns": [
				{
					"name": "meta.preprocessor.bro",
					"begin": "^\\s*(\\@)(load|load-sigs|unload)\\s+(.*)\\b",
					"end": "$",
					"captures": {
						"1": {
							"name": "keyword.other.directive.bro"
						},
						"2": {
							"name": "keyword.control.import.bro"
						},
						"3": {
							"name": "meta.definition.bro"
						}
					}
				},
				{
					"name": "meta.preprocessor.bro",
					"begin": "^\\s*(\\@)(prefixes)\\s+(=|\\+=)\\s+([0-9a-zA-Z_-]+)\\b",
					"end": "$",
					"captures": {
						"1": {
							"name": "keyword.other.directive.bro"
						},
						"2": {
							"name": "keyword.control.def.bro"
						},
						"3": {
							"name": "keyword.operator.assignment.bro"
						},
						"4": {
							"name": "text.plain.bro"
						}
					}
				},
				{
					"name": "meta.preprocessor.bro",
					"match": "^\\s*(\\@)(if|ifdef|ifndef|else|endif)\\b",
					"captures": {
						"1": {
							"name": "keyword.other.directive.bro"
						},
						"2": {
							"name": "keyword.control.directive.bro"
						}
					}
				},
				{
					"name": "meta.preprocessor.bro",
					"match": "(\\@DEBUG|\\@DIR|\\@FILENAME)",
					"captures": {
						"1": {
							"name": "constant.other.placeholder.bro"
						}
					}
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.bro",
					"match": "\\b(bool|count|int|double|time|interval|string|pattern|port|addr|subnet|time|enum|table|set|vector|record|function|event|hook|file|opaque|any)\\b"
				},
				{
					"name": "keyword.operator.bro",
					"match": "\\b(of)\\b"
				}
			]
		},
		"statements": {
			"patterns": [
				{
					"name": "keyword.control.flow.bro",
					"match": "\\b(local|add|delete|print|for|next|break|if|switch|break|fallthrough|when|schedule|return)\\b"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"name": "keyword.control.import.bro",
					"match": "^\\s*(module)\\s+([a-zA-Z_]{1}[0-9a-zA-Z_-]*)",
					"captures": {
						"2": {
							"name": "support.variable.namespace.bro"
						}
					}
				},
				{
					"name": "keyword.control.export.bro",
					"match": "\\b(export)\\b"
				},
				{
					"name": "storage.modifier.declaration.bro",
					"match": "\\b(const|type|redef|function|event|hook)\\b"
				},
				{
					"name": "storage.modifier.global.bro",
					"match": "\\b(global)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				// subnet
				{
					"name": "constant.other.subnet.bro",
					"match": "\\b((25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])/(3[0-2]|[1-2]?[0-9])\\b"
				},
				// subnetv6
				// TODO: subnetv6
				// ipv4
				{
					"name": "constant.other.ip.bro",
					"match": "\\b((25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])\\b(?!/)"
				},
				// ipv6
				// TODO: ipv6
				// port
				{
					"name": "constant.other.port.bro",
					"match": "\\b((6[0-5]{2}[0-3][0-5]|[1-5]?[0-9]{1,4})/(tcp|udp|icmp))\\b"
				},
				// interval
				{
					"name": "constant.other.interval.bro",
					"match": "\\b(([0-9]+)\\s?((sec|min|hr|day)s?))\\b"
				},
				// float
				{
					"name": "constant.numeric.float.bro",
					"match": "(?<![0-9])(\\s*-?)\\.\\b([0-9]*)\\b(?!\\.)|(?<!\\.)(\\s*-?)\\b([0-9]+\\.[0-9]+)\\b(?!\\.)"
				},
				// hex
				{
					"name": "constant.numeric.integer.hexadecimal.bro",
					"match": "\\b(0(x|X)[0-9a-fA-F]+)\\b"
				},
				// dec
				{
					"name": "constant.numeric.integer.decimal.bro",
					"match": "(?<!\\.)(\\s*-?)\\b([0-9]+)\\b(?!\\.|/|\\s(sec|secs|min|mins|day|days))"
				},
				// bool
				{
					"name": "constant.language.boolean.bro",
					"match": "\\b(T|F)\\b"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"name": "keyword.operator.logical.bro",
					"match": "(\\!|&&|\\|\\||\\b(in)\\b)"
				},
				{
					"name": "keyword.operator.comparison.bro",
					"match": "(<|<\\=|>\\=|>|\\=\\=|\\!\\=)"
				},
				{
					"name": "keyword.operator.assignment.augmented.bro",
					"match": "(\\+\\=|-\\=|\\*\\=|/\\=)"
				},
				{
					"name": "keyword.operator.increment-decrement.bro",
					"match": "(\\+\\+|\\-\\-)"
				},
				{
					"name": "keyword.operator.arithmetic.bro",
					"match": "(\\+|\\-|\\*|/|%)(?!\\+|\\-)"
				},
				{
					"name": "keyword.operator.assignment.bro",
					"match": "(\\=)"
				},
				{
					"name": "text.plain.bro",
					"match": "(\\|)([a-zA-Z_]{1}[0-9a-zA-Z_-]+)(\\|)",
					"captures": {
						"1": {
							"name": "keyword.operator.length.bro"
						},
						"3": {
							"name": "keyword.operator.length.bro"
						}
					}
				},
				{
					"name": "keyword.operator.dereference.bro",
					"match": "(\\??\\$)"
				}
			]
		}
	},
	"patterns": [
		{
			"include": "#directives"
		},
		{
			"name": "string.quoted.double.bro", 
			"begin": "\"", 
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.bro"
				}
			}, 
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bro"
				}
			}, 
			"patterns": [
				{
					"include": "#string_escaped_char"
				}, 
				{
					"include": "#string_placeholder"
				}
			], 
			"end": "\""
		},
		{
			"name": "string.quoted.regexp.bro", 
			"begin": "(?<=in|=\\s|=|,|\\()\\s*(/)",
			"end": "/",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.bro"
				}
			}, 
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bro"
				}
			}, 
			"patterns": [
				{
					"include": "#string_escaped_char"
				}, 
				{
					"include": "#string_placeholder"
				}
			]
		}, 
		{
			"name": "meta.function.bro",
			"match": "^\\s*(function|hook|event)\\s+(?:([a-zA-Z_]{1}[0-9a-zA-Z_-]*)(::))?([0-9a-zA-Z_-]+)",
			"captures": {
				"1": {
					"name": "storage.type.function.bro"
				},
				"2": {
					"name": "support.variable.namespace.bro"
				},
				"3": {
					"name": "meta.scope.namespace.bro"
				},
				"4": {
					"name": "entity.name.function.bro"
				}
			},
			"patterns": [
				{
					"include": "#types"
				},
				{
					"include": "#attributes"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#constants"
				}
			]
		},
		{
			"name": "comment.block.documentation.bro",
			"begin": "##",
			"end": "$",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.comment.bro" }
			},
			"patterns": [
				{
					"name": "variable.parameter.bro",
					"match": "(?<=##\\ )([0-9a-zA-Z_-]+)(?=:)"
				}
			]
		},
		{
			"name": "comment.line.number-sign.bro",
			"begin": "#",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.comment.bro" }
			},
			"end": "$"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#types"
		},
		{
			"include": "#operator"
		},
		{
			"name": "meta.scope.namespace.bro",
			"match": "\\b([a-zA-Z_]{1}[0-9a-zA-Z_-]*)(::)",
			"captures": {
				"1": {
					"name": "support.variable.namespace.bro"
				}
			}
		},
		{
			"name": "support.type.bro",
			"match": "\\b(syslog|system|piped_exec|srand|rand|md5_hash|md5_hash_init|md5_hash_update|md5_hash_finish|md5_hmac|sha1_hash|sha1_hash_init|sha1_hash_update|sha1_hash_finish|sha256_hash|sha256_hash_init|sha256_hash_update|sha256_hash_finish|strftime|lookup_addr|lookup_hostname|identify_data|unique_id|unique_id_from|terminate|exit|bro_version|getpid|gethostname|current_time|network_time|is_local_interface|open|open_for_append|close|active_file|write_file|file_size|get_file_name|set_buf|flush_all|mkdir|enable_raw_output|length|clear_table|resize|any_set|all_set|sort|order|floor|sqrt|exp|ln|log10|byte_len|sub_bytes|split|split1|split_all|split_n|str_split|string_cat|cat_string_array|cat_string_array_n|join_string_array|join_string_vec|sort_string_array|sub|gsub|strcmp|strstr|subst_string|to_lower|to_upper|is_ascii|edit|clean|to_string_literal|escape_string|string_to_ascii_hex|strip|string_fill|str_shell_escape|find_all|find_last|hexdump|find_entropy|entropy_test_init|entropy_test_add|entropy_test_finish|is_v4_addr|is_v6_addr|mask_addr|remask_addr|is_tcp_port|is_udp_port|is_icmp_port|connection_exists|lookup_connection|unescape_URI|lookup_location|lookup_asn|cat|cat_sep|fmt|to_int|int_to_count|double_to_count|to_count|to_double|interval_to_double|double_to_interval|time_to_double|double_to_time|port_to_count|count_to_port|to_port|count_to_v4_addr|to_addr|raw_bytes_to_v4_addr|ptr_name_to_addr|addr_to_ptr_name|addr_to_counts|counts_to_addr|to_subnet|bytestring_to_hexstr|decode_base64|decode_base64_custom|uuid_to_string|merge_pattern|convert_for_pattern|string_to_pattern|)\\b"
		}
	],
	"uuid": "d301f32f-e93c-4f8f-9da6-b87926f53d4f"
}